version: '3.8'

services:
  db:
    image: postgres:14-alpine
    container_name: db_app
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: appdb
    volumes:
      - ./data:/var/lib/postgresql/data
    networks:
      - app-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d appdb"] # Comando nativo de Postgres para verificar disponibilidad
      interval: 10s
      timeout: 5s
      retries: 5
  backend:
      build:
        context: ./backend
      container_name: backend_app
      ports:
        - "3000:3000"
      environment:
        DB_HOST: db
        DB_PORT: 5432
      # Se usa una sola vez depends_on, y se especifica la condición de salud.
      depends_on:
        db:
          condition: service_healthy # Espera que la DB esté saludable
      networks:
        - app-net
      healthcheck:
        test: ["CMD-SHELL", "nc -z 127.0.0.1 3000 || exit 1"]
        interval: 5s
        timeout: 5s
        retries: 5
      
  frontend:
    image: nginx:alpine
    container_name: frontend_app
    volumes:
      - ./frontend:/usr/share/nginx/html
    networks:
      - app-net
      
  proxy:
    image: nginx:alpine 
    container_name: proxy_app
    volumes: 
      - ./proxy/default.conf:/etc/nginx/conf.d/default.conf
    ports:
      - "8080:80"
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_started
    networks:
      - app-net
    command: /bin/sh -c "sleep 10 && nginx -g 'daemon off;'"

networks:
  app-net:
    driver: bridge